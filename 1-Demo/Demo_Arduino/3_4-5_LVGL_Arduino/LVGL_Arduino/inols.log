






Started logging.

<<<
Content-Length: 3088

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":20684,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\LVGL_Arduino\\LVGL_Arduino","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/LVGL_Arduino/LVGL_Arduino","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/LVGL_Arduino/LVGL_Arduino","name":"LVGL_Arduino"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 9404

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/LVGL_Arduino/LVGL_Arduino/LVGL_Arduino.ino","languageId":"cpp","version":1,"text":"#include <lvgl.h>\r\n#include <TFT_eSPI.h>\r\n\r\n#include <demos/lv_demos.h>\r\n\r\n/*更改屏幕分辨率*/\r\nstatic const uint16_t screenWidth  = 320;\r\nstatic const uint16_t screenHeight = 240;\r\n\r\nstatic lv_disp_draw_buf_t draw_buf;\r\nstatic lv_color_t buf[ screenWidth * 10 ];\r\n\r\nTFT_eSPI tft = TFT_eSPI(); /* TFT实例 */\r\n\r\n#if LV_USE_LOG != 0\r\n/* 串行调试 */\r\nvoid my_print(const char * buf)\r\n{\r\n    Serial.printf(buf);\r\n    Serial.flush();\r\n}\r\n#endif\r\n//_______________________\r\nvoid lv_example_btn(void)\r\n{\r\n    /*要转换的属性*/\r\n    static lv_style_prop_t props[] = {\r\n            LV_STYLE_TRANSFORM_WIDTH, LV_STYLE_TRANSFORM_HEIGHT, LV_STYLE_TEXT_LETTER_SPACE};\r\n\r\n    /*Transition descriptor when going back to the default state.\r\n     *Add some delay to be sure the press transition is visible even if the press was very short*/\r\n    static lv_style_transition_dsc_t transition_dsc_def;\r\n    lv_style_transition_dsc_init(&transition_dsc_def, props, lv_anim_path_overshoot, 250, 100, NULL);\r\n\r\n    /*Transition descriptor when going to pressed state.\r\n     *No delay, go to presses state immediately*/\r\n    static lv_style_transition_dsc_t transition_dsc_pr;\r\n    lv_style_transition_dsc_init(&transition_dsc_pr, props, lv_anim_path_ease_in_out, 250, 0, NULL);\r\n\r\n    /*Add only the new transition to he default state*/\r\n    static lv_style_t style_def;\r\n    lv_style_init(&style_def);\r\n    lv_style_set_transition(&style_def, &transition_dsc_def);\r\n\r\n    /*Add the transition and some transformation to the presses state.*/\r\n    static lv_style_t style_pr;\r\n    lv_style_init(&style_pr);\r\n    lv_style_set_transform_width(&style_pr, 10);\r\n    lv_style_set_transform_height(&style_pr, -10);\r\n    lv_style_set_text_letter_space(&style_pr, 10);\r\n    lv_style_set_transition(&style_pr, &transition_dsc_pr);\r\n\r\n    lv_obj_t * btn1 = lv_btn_create(lv_scr_act());\r\n    lv_obj_align(btn1, LV_ALIGN_CENTER, 0, -80);\r\n    lv_obj_add_style(btn1, &style_pr, LV_STATE_PRESSED);\r\n    lv_obj_add_style(btn1, &style_def, 0);\r\n\r\n    lv_obj_t * label = lv_label_create(btn1);\r\n    lv_label_set_text(label, \"btn1\");\r\n\r\n        /*Init the style for the default state*/\r\n    static lv_style_t style;\r\n    lv_style_init(&style);\r\n\r\n    lv_style_set_radius(&style, 3);\r\n\r\n    lv_style_set_bg_opa(&style, LV_OPA_100);\r\n    lv_style_set_bg_color(&style, lv_palette_main(LV_PALETTE_BLUE));\r\n    lv_style_set_bg_grad_color(&style, lv_palette_darken(LV_PALETTE_BLUE, 2));\r\n    lv_style_set_bg_grad_dir(&style, LV_GRAD_DIR_VER);\r\n\r\n    lv_style_set_border_opa(&style, LV_OPA_40);\r\n    lv_style_set_border_width(&style, 2);\r\n    lv_style_set_border_color(&style, lv_palette_main(LV_PALETTE_GREY));\r\n\r\n    lv_style_set_shadow_width(&style, 8);\r\n    lv_style_set_shadow_color(&style, lv_palette_main(LV_PALETTE_GREY));\r\n    lv_style_set_shadow_ofs_y(&style, 8);\r\n\r\n    lv_style_set_outline_opa(&style, LV_OPA_COVER);\r\n    lv_style_set_outline_color(&style, lv_palette_main(LV_PALETTE_BLUE));\r\n\r\n    lv_style_set_text_color(&style, lv_color_white());\r\n    lv_style_set_pad_all(&style, 10);\r\n\r\n    /*Init the pressed style*/\r\n    static lv_style_t style_pr_2;\r\n    lv_style_init(&style_pr_2);\r\n\r\n    /*Ad a large outline when pressed*/\r\n    lv_style_set_outline_width(&style_pr_2, 30);\r\n    lv_style_set_outline_opa(&style_pr_2, LV_OPA_TRANSP);\r\n\r\n    lv_style_set_translate_y(&style_pr_2, 5);\r\n    lv_style_set_shadow_ofs_y(&style_pr_2, 3);\r\n    lv_style_set_bg_color(&style_pr_2, lv_palette_darken(LV_PALETTE_BLUE, 2));\r\n    lv_style_set_bg_grad_color(&style_pr_2, lv_palette_darken(LV_PALETTE_BLUE, 4));\r\n\r\n    /*Add a transition to the the outline*/\r\n    static lv_style_transition_dsc_t trans;\r\n    static lv_style_prop_t props2[] = {LV_STYLE_OUTLINE_WIDTH, LV_STYLE_OUTLINE_OPA};\r\n    lv_style_transition_dsc_init(&trans, props2, lv_anim_path_linear, 300, 0, NULL);\r\n\r\n    lv_style_set_transition(&style_pr_2, &trans);\r\n\r\n    lv_obj_t * btn2 = lv_btn_create(lv_scr_act());\r\n    lv_obj_remove_style_all(btn2);                          /*Remove the style coming from the theme*/\r\n    lv_obj_add_style(btn2, &style, 0);\r\n    lv_obj_add_style(btn2, &style_pr_2, LV_STATE_PRESSED);\r\n    lv_obj_set_size(btn2, LV_SIZE_CONTENT, LV_SIZE_CONTENT);\r\n    lv_obj_center(btn2);\r\n\r\n    lv_obj_t * label2 = lv_label_create(btn2);\r\n    lv_label_set_text(label2, \"Button\");\r\n    lv_obj_center(label2);\r\n}\r\n//_______________________\r\n/* 显示器刷新 */\r\nvoid my_disp_flush( lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p )\r\n{\r\n    uint32_t w = ( area->x2 - area->x1 + 1 );\r\n    uint32_t h = ( area->y2 - area->y1 + 1 );\r\n\r\n    tft.startWrite();\r\n    tft.setAddrWindow( area->x1, area->y1, w, h );\r\n    tft.pushColors( ( uint16_t * )&color_p->full, w * h, true );\r\n    tft.endWrite();\r\n\r\n    lv_disp_flush_ready( disp );\r\n}\r\n\r\n/*读取触摸板*/\r\nvoid my_touchpad_read( lv_indev_drv_t * indev_driver, lv_indev_data_t * data )\r\n{\r\n    uint16_t touchX, touchY;\r\n\r\n    bool touched = tft.getTouch( &touchX, &touchY, 600 );\r\n\r\n    if( !touched )\r\n    {\r\n        data->state = LV_INDEV_STATE_REL;\r\n    }\r\n    else\r\n    {\r\n        data->state = LV_INDEV_STATE_PR;\r\n\r\n        /*设置坐标*/\r\n        data->point.x = touchX;\r\n        data->point.y = touchY;\r\n\r\n        Serial.print( \"Data x \" );\r\n        Serial.println( touchX );\r\n\r\n        Serial.print( \"Data y \" );\r\n        Serial.println( touchY );\r\n    }\r\n}\r\n\r\nvoid setup()\r\n{\r\n    Serial.begin( 115200 ); /*初始化串口*/\r\n\r\n    String LVGL_Arduino = \"Hello Arduino! \";\r\n    LVGL_Arduino += String('V') + lv_version_major() + \".\" + lv_version_minor() + \".\" + lv_version_patch();\r\n\r\n    Serial.println( LVGL_Arduino );\r\n    Serial.println( \"I am LVGL_Arduino\" );\r\n\r\n    lv_init();\r\n\r\n#if LV_USE_LOG != 0\r\n    lv_log_register_print_cb( my_print ); /* 用于调试的注册打印功能 */\r\n#endif\r\n\r\n    tft.begin();          /*初始化*/\r\n    tft.setRotation(1); /* 旋转 */\r\n\r\n    //校准模式。一是四角定位、二是直接输入模拟数值直接定位\r\n    //touch_calibrate();//屏幕校准\r\n    uint16_t calData[5] = { 145, 3788, 271, 3535, 1 };\r\n    tft.setTouch( calData );\r\n\r\n    lv_disp_draw_buf_init( &draw_buf, buf, NULL, screenWidth * 10 );\r\n\r\n    /*初始化显示*/\r\n    static lv_disp_drv_t disp_drv;\r\n    lv_disp_drv_init( &disp_drv );\r\n    /*将以下行更改为显示分辨率*/\r\n    disp_drv.hor_res = screenWidth;\r\n    disp_drv.ver_res = screenHeight;\r\n    disp_drv.flush_cb = my_disp_flush;\r\n    disp_drv.draw_buf = &draw_buf;\r\n    lv_disp_drv_register( &disp_drv );\r\n\r\n    /*初始化（虚拟）输入设备驱动程序*/\r\n    static lv_indev_drv_t indev_drv;\r\n    lv_indev_drv_init( &indev_drv );\r\n    indev_drv.type = LV_INDEV_TYPE_POINTER;\r\n    indev_drv.read_cb = my_touchpad_read;\r\n    lv_indev_drv_register( &indev_drv );\r\n\r\n#if 1\r\n    /* 创建简单标签 */\r\n//    lv_obj_t *label = lv_label_create( lv_scr_act() );\r\n//    lv_label_set_text( label, LVGL_Arduino.c_str() );\r\n//    lv_obj_align( label, LV_ALIGN_CENTER, 0, 0 );\r\n     lv_example_btn();\r\n#else\r\n    /* 尝试lv_examples Arduino库中的一个示例\r\n       请确保按照上面所写的内容将其包括在内。\r\n    lv_example_btn_1();\r\n   */\r\n\r\n    // uncomment one of these demos\r\n    lv_demo_widgets();            // OK\r\n    // lv_demo_benchmark();          // OK\r\n    // lv_demo_keypad_encoder();     // works, but I haven't an encoder\r\n    // lv_demo_music();              // NOK\r\n    // lv_demo_printer();\r\n    // lv_demo_stress();             // seems to be OK\r\n#endif\r\n    Serial.println( \"Setup done\" );\r\n}\r\n\r\nvoid loop()\r\n{\r\n    lv_timer_handler(); /* 让GUI完成它的工作 */\r\n    delay( 5 );\r\n}\r\n\r\nvoid touch_calibrate()//屏幕校准\r\n{\r\n  uint16_t calData[5];\r\n  uint8_t calDataOK = 0;\r\n\r\n  //校准\r\n  tft.fillScreen(TFT_BLACK);\r\n  tft.setCursor(20, 0);\r\n  tft.setTextFont(2);\r\n  tft.setTextSize(1);\r\n  tft.setTextColor(TFT_WHITE, TFT_BLACK);\r\n\r\n  tft.println(\"按指示触摸角落\");\r\n\r\n  tft.setTextFont(1);\r\n  tft.println();\r\n\r\n  tft.calibrateTouch(calData, TFT_MAGENTA, TFT_BLACK, 15);\r\n\r\n  Serial.println(); Serial.println();\r\n  Serial.println(\"//在setup()中使用此校准代码:\");\r\n  Serial.print(\"uint16_t calData[5] = \");\r\n  Serial.print(\"{ \");\r\n\r\n  for (uint8_t i = 0; i < 5; i++)\r\n  {\r\n    Serial.print(calData[i]);\r\n    if (i < 4) Serial.print(\", \");\r\n  }\r\n\r\n  Serial.println(\" };\");\r\n  Serial.print(\"  tft.setTouch(calData);\");\r\n  Serial.println(); Serial.println();\r\n\r\n  tft.fillScreen(TFT_BLACK);\r\n  \r\n  tft.setTextColor(TFT_GREEN, TFT_BLACK);\r\n  tft.println(\"XZ OK!\");\r\n  tft.println(\"Calibration code sent to Serial port.\");\r\n\r\n}\r\n"}}}Content-Length: 280

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/LVGL_Arduino/LVGL_Arduino/LVGL_Arduino.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}






Started logging.

<<<
Content-Length: 3088

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":19220,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\LVGL_Arduino\\LVGL_Arduino","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/LVGL_Arduino/LVGL_Arduino","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/LVGL_Arduino/LVGL_Arduino","name":"LVGL_Arduino"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 9404

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/LVGL_Arduino/LVGL_Arduino/LVGL_Arduino.ino","languageId":"cpp","version":1,"text":"#include <lvgl.h>\r\n#include <TFT_eSPI.h>\r\n\r\n#include <demos/lv_demos.h>\r\n\r\n/*更改屏幕分辨率*/\r\nstatic const uint16_t screenWidth  = 320;\r\nstatic const uint16_t screenHeight = 240;\r\n\r\nstatic lv_disp_draw_buf_t draw_buf;\r\nstatic lv_color_t buf[ screenWidth * 10 ];\r\n\r\nTFT_eSPI tft = TFT_eSPI(); /* TFT实例 */\r\n\r\n#if LV_USE_LOG != 0\r\n/* 串行调试 */\r\nvoid my_print(const char * buf)\r\n{\r\n    Serial.printf(buf);\r\n    Serial.flush();\r\n}\r\n#endif\r\n//_______________________\r\nvoid lv_example_btn(void)\r\n{\r\n    /*要转换的属性*/\r\n    static lv_style_prop_t props[] = {\r\n            LV_STYLE_TRANSFORM_WIDTH, LV_STYLE_TRANSFORM_HEIGHT, LV_STYLE_TEXT_LETTER_SPACE};\r\n\r\n    /*Transition descriptor when going back to the default state.\r\n     *Add some delay to be sure the press transition is visible even if the press was very short*/\r\n    static lv_style_transition_dsc_t transition_dsc_def;\r\n    lv_style_transition_dsc_init(&transition_dsc_def, props, lv_anim_path_overshoot, 250, 100, NULL);\r\n\r\n    /*Transition descriptor when going to pressed state.\r\n     *No delay, go to presses state immediately*/\r\n    static lv_style_transition_dsc_t transition_dsc_pr;\r\n    lv_style_transition_dsc_init(&transition_dsc_pr, props, lv_anim_path_ease_in_out, 250, 0, NULL);\r\n\r\n    /*Add only the new transition to he default state*/\r\n    static lv_style_t style_def;\r\n    lv_style_init(&style_def);\r\n    lv_style_set_transition(&style_def, &transition_dsc_def);\r\n\r\n    /*Add the transition and some transformation to the presses state.*/\r\n    static lv_style_t style_pr;\r\n    lv_style_init(&style_pr);\r\n    lv_style_set_transform_width(&style_pr, 10);\r\n    lv_style_set_transform_height(&style_pr, -10);\r\n    lv_style_set_text_letter_space(&style_pr, 10);\r\n    lv_style_set_transition(&style_pr, &transition_dsc_pr);\r\n\r\n    lv_obj_t * btn1 = lv_btn_create(lv_scr_act());\r\n    lv_obj_align(btn1, LV_ALIGN_CENTER, 0, -80);\r\n    lv_obj_add_style(btn1, &style_pr, LV_STATE_PRESSED);\r\n    lv_obj_add_style(btn1, &style_def, 0);\r\n\r\n    lv_obj_t * label = lv_label_create(btn1);\r\n    lv_label_set_text(label, \"btn1\");\r\n\r\n        /*Init the style for the default state*/\r\n    static lv_style_t style;\r\n    lv_style_init(&style);\r\n\r\n    lv_style_set_radius(&style, 3);\r\n\r\n    lv_style_set_bg_opa(&style, LV_OPA_100);\r\n    lv_style_set_bg_color(&style, lv_palette_main(LV_PALETTE_BLUE));\r\n    lv_style_set_bg_grad_color(&style, lv_palette_darken(LV_PALETTE_BLUE, 2));\r\n    lv_style_set_bg_grad_dir(&style, LV_GRAD_DIR_VER);\r\n\r\n    lv_style_set_border_opa(&style, LV_OPA_40);\r\n    lv_style_set_border_width(&style, 2);\r\n    lv_style_set_border_color(&style, lv_palette_main(LV_PALETTE_GREY));\r\n\r\n    lv_style_set_shadow_width(&style, 8);\r\n    lv_style_set_shadow_color(&style, lv_palette_main(LV_PALETTE_GREY));\r\n    lv_style_set_shadow_ofs_y(&style, 8);\r\n\r\n    lv_style_set_outline_opa(&style, LV_OPA_COVER);\r\n    lv_style_set_outline_color(&style, lv_palette_main(LV_PALETTE_BLUE));\r\n\r\n    lv_style_set_text_color(&style, lv_color_white());\r\n    lv_style_set_pad_all(&style, 10);\r\n\r\n    /*Init the pressed style*/\r\n    static lv_style_t style_pr_2;\r\n    lv_style_init(&style_pr_2);\r\n\r\n    /*Ad a large outline when pressed*/\r\n    lv_style_set_outline_width(&style_pr_2, 30);\r\n    lv_style_set_outline_opa(&style_pr_2, LV_OPA_TRANSP);\r\n\r\n    lv_style_set_translate_y(&style_pr_2, 5);\r\n    lv_style_set_shadow_ofs_y(&style_pr_2, 3);\r\n    lv_style_set_bg_color(&style_pr_2, lv_palette_darken(LV_PALETTE_BLUE, 2));\r\n    lv_style_set_bg_grad_color(&style_pr_2, lv_palette_darken(LV_PALETTE_BLUE, 4));\r\n\r\n    /*Add a transition to the the outline*/\r\n    static lv_style_transition_dsc_t trans;\r\n    static lv_style_prop_t props2[] = {LV_STYLE_OUTLINE_WIDTH, LV_STYLE_OUTLINE_OPA};\r\n    lv_style_transition_dsc_init(&trans, props2, lv_anim_path_linear, 300, 0, NULL);\r\n\r\n    lv_style_set_transition(&style_pr_2, &trans);\r\n\r\n    lv_obj_t * btn2 = lv_btn_create(lv_scr_act());\r\n    lv_obj_remove_style_all(btn2);                          /*Remove the style coming from the theme*/\r\n    lv_obj_add_style(btn2, &style, 0);\r\n    lv_obj_add_style(btn2, &style_pr_2, LV_STATE_PRESSED);\r\n    lv_obj_set_size(btn2, LV_SIZE_CONTENT, LV_SIZE_CONTENT);\r\n    lv_obj_center(btn2);\r\n\r\n    lv_obj_t * label2 = lv_label_create(btn2);\r\n    lv_label_set_text(label2, \"Button\");\r\n    lv_obj_center(label2);\r\n}\r\n//_______________________\r\n/* 显示器刷新 */\r\nvoid my_disp_flush( lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p )\r\n{\r\n    uint32_t w = ( area->x2 - area->x1 + 1 );\r\n    uint32_t h = ( area->y2 - area->y1 + 1 );\r\n\r\n    tft.startWrite();\r\n    tft.setAddrWindow( area->x1, area->y1, w, h );\r\n    tft.pushColors( ( uint16_t * )&color_p->full, w * h, true );\r\n    tft.endWrite();\r\n\r\n    lv_disp_flush_ready( disp );\r\n}\r\n\r\n/*读取触摸板*/\r\nvoid my_touchpad_read( lv_indev_drv_t * indev_driver, lv_indev_data_t * data )\r\n{\r\n    uint16_t touchX, touchY;\r\n\r\n    bool touched = tft.getTouch( &touchX, &touchY, 600 );\r\n\r\n    if( !touched )\r\n    {\r\n        data->state = LV_INDEV_STATE_REL;\r\n    }\r\n    else\r\n    {\r\n        data->state = LV_INDEV_STATE_PR;\r\n\r\n        /*设置坐标*/\r\n        data->point.x = touchX;\r\n        data->point.y = touchY;\r\n\r\n        Serial.print( \"Data x \" );\r\n        Serial.println( touchX );\r\n\r\n        Serial.print( \"Data y \" );\r\n        Serial.println( touchY );\r\n    }\r\n}\r\n\r\nvoid setup()\r\n{\r\n    Serial.begin( 115200 ); /*初始化串口*/\r\n\r\n    String LVGL_Arduino = \"Hello Arduino! \";\r\n    LVGL_Arduino += String('V') + lv_version_major() + \".\" + lv_version_minor() + \".\" + lv_version_patch();\r\n\r\n    Serial.println( LVGL_Arduino );\r\n    Serial.println( \"I am LVGL_Arduino\" );\r\n\r\n    lv_init();\r\n\r\n#if LV_USE_LOG != 0\r\n    lv_log_register_print_cb( my_print ); /* 用于调试的注册打印功能 */\r\n#endif\r\n\r\n    tft.begin();          /*初始化*/\r\n    tft.setRotation(1); /* 旋转 */\r\n\r\n    //校准模式。一是四角定位、二是直接输入模拟数值直接定位\r\n    //touch_calibrate();//屏幕校准\r\n    uint16_t calData[5] = { 145, 3788, 271, 3535, 1 };\r\n    tft.setTouch( calData );\r\n\r\n    lv_disp_draw_buf_init( &draw_buf, buf, NULL, screenWidth * 10 );\r\n\r\n    /*初始化显示*/\r\n    static lv_disp_drv_t disp_drv;\r\n    lv_disp_drv_init( &disp_drv );\r\n    /*将以下行更改为显示分辨率*/\r\n    disp_drv.hor_res = screenWidth;\r\n    disp_drv.ver_res = screenHeight;\r\n    disp_drv.flush_cb = my_disp_flush;\r\n    disp_drv.draw_buf = &draw_buf;\r\n    lv_disp_drv_register( &disp_drv );\r\n\r\n    /*初始化（虚拟）输入设备驱动程序*/\r\n    static lv_indev_drv_t indev_drv;\r\n    lv_indev_drv_init( &indev_drv );\r\n    indev_drv.type = LV_INDEV_TYPE_POINTER;\r\n    indev_drv.read_cb = my_touchpad_read;\r\n    lv_indev_drv_register( &indev_drv );\r\n\r\n#if 1\r\n    /* 创建简单标签 */\r\n//    lv_obj_t *label = lv_label_create( lv_scr_act() );\r\n//    lv_label_set_text( label, LVGL_Arduino.c_str() );\r\n//    lv_obj_align( label, LV_ALIGN_CENTER, 0, 0 );\r\n     lv_example_btn();\r\n#else\r\n    /* 尝试lv_examples Arduino库中的一个示例\r\n       请确保按照上面所写的内容将其包括在内。\r\n    lv_example_btn_1();\r\n   */\r\n\r\n    // uncomment one of these demos\r\n    lv_demo_widgets();            // OK\r\n    // lv_demo_benchmark();          // OK\r\n    // lv_demo_keypad_encoder();     // works, but I haven't an encoder\r\n    // lv_demo_music();              // NOK\r\n    // lv_demo_printer();\r\n    // lv_demo_stress();             // seems to be OK\r\n#endif\r\n    Serial.println( \"Setup done\" );\r\n}\r\n\r\nvoid loop()\r\n{\r\n    lv_timer_handler(); /* 让GUI完成它的工作 */\r\n    delay( 5 );\r\n}\r\n\r\nvoid touch_calibrate()//屏幕校准\r\n{\r\n  uint16_t calData[5];\r\n  uint8_t calDataOK = 0;\r\n\r\n  //校准\r\n  tft.fillScreen(TFT_BLACK);\r\n  tft.setCursor(20, 0);\r\n  tft.setTextFont(2);\r\n  tft.setTextSize(1);\r\n  tft.setTextColor(TFT_WHITE, TFT_BLACK);\r\n\r\n  tft.println(\"按指示触摸角落\");\r\n\r\n  tft.setTextFont(1);\r\n  tft.println();\r\n\r\n  tft.calibrateTouch(calData, TFT_MAGENTA, TFT_BLACK, 15);\r\n\r\n  Serial.println(); Serial.println();\r\n  Serial.println(\"//在setup()中使用此校准代码:\");\r\n  Serial.print(\"uint16_t calData[5] = \");\r\n  Serial.print(\"{ \");\r\n\r\n  for (uint8_t i = 0; i < 5; i++)\r\n  {\r\n    Serial.print(calData[i]);\r\n    if (i < 4) Serial.print(\", \");\r\n  }\r\n\r\n  Serial.println(\" };\");\r\n  Serial.print(\"  tft.setTouch(calData);\");\r\n  Serial.println(); Serial.println();\r\n\r\n  tft.fillScreen(TFT_BLACK);\r\n  \r\n  tft.setTextColor(TFT_GREEN, TFT_BLACK);\r\n  tft.println(\"XZ OK!\");\r\n  tft.println(\"Calibration code sent to Serial port.\");\r\n\r\n}\r\n"}}}Content-Length: 280

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/LVGL_Arduino/LVGL_Arduino/LVGL_Arduino.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}